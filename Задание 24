#include <iostream>

//Построить матрицу С, где c[i][j] равен сумме элементов i-ой строки матрицы A, которые отстутствуют в j-ом столбце B, 0 в противном случае

int** memory_alloc(const int& n, const int& m)
{
    int** a = new int* [n];
    for (int i = 0; i < n; ++i)
    {
        a[i] = new int[m];
    }
    return a;
}

void destroy(int** a, const int& n)
{
    for (int i = 0; i < n; ++i)
    {
        delete[] a[i];
    }
}

void input(int** a, const int& n, const int& m)
{
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            scanf_s("%d", &a[i][j]);
        }
    }
}

void output(int** a, const int& n, const int& m)
{
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
}

bool __search(int** b, const int& n, const int& j_index, const float& param)
{
    for (int i = 0; i < n; ++i)
    {
        if (fabs(b[i][j_index] - param) < 0.001)
            return true;
    }
    return false;
}

int __getElem(int** a, int** b, const int& n, const int& m, const int& i_index, const int& j_index)
{
    int sum = 0;
    for (int j = 0; j < m; ++j)
    {
        if (!__search(b, n, j, a[i_index][j]))
            sum += a[i_index][j];
    }
    return sum;
}

int** get_matrix(int** a, int** b, const int& n, const int& m)
{
    int** c = memory_alloc(n, m);


    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            c[i][j] = __getElem(a, b, n, m, i, j);
        }
    }
    return c;
}

int main()
{
    int n, m;
    scanf_s("%d%d", &n, &m);
    int** a = memory_alloc(n, m);
    int** b = memory_alloc(n, m);
    input(a, n, m);
    input(b, n, m);
    int** c = get_matrix(a, b, n, m);
    output(c, n, m);
    destroy(a, n);
    destroy(b, n);
    destroy(c, n);

    return 0;
}
