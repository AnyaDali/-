#include <iostream>
#include <cmath>
float **memory_alloc(const int &n, const int &m)
{
    float **a = new float *[n];
    for (size_t i = 0; i < n; ++i)
    {
        a[i] = new float[m];
    }
    return a;
}

void destroy(float **a, const int &n)
{
    for (size_t i = 0; i < n; ++i)
    {
        delete[] a[i];
    }
}

void input(float **a, const int &n, const int &m)
{
    for (size_t i = 0; i < n; ++i)
    {
        for (size_t j = 0; j < m; ++j)
        {
            scanf("%f", &a[i][j]);
        }
    }
}

void output(float **a, const int &n, const int &m)
{
    for (size_t i = 0; i < n; ++i)
    {
        for (size_t j = 0; j < m; ++j)
        {
            printf("%f ", a[i][j]);
        }
        printf("\n");
    }
}

bool __search(float **b, const int &n, const int &j_index,const float& param)
{
    for (size_t i = 0; i < n; ++i)
    {
        if (fabs(b[i][j_index] - param) < 0.001)
            return true;
    }
    return false;
}

float __getElem(float **a, float **b, const int &n, const int &m, const int &i_index, const int &j_index)
{
    float sum = 0;
    for (size_t j = 0; j < m; ++j)
    {
        if (!__search(b, n, j, a[i_index][j]))
            sum += a[i_index][j];
    }
    return sum;
}

float **get_matrix(float **a, float **b, const int &n, const int &m)
{
    float **c = memory_alloc(n, m);


    for (size_t i = 0; i < n; ++i)
    {
        for (size_t j = 0; j < m; ++j)
        {
            c[i][j] = __getElem(a, b, n, m, i, j);
        }
    }
    return c;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    float **a = memory_alloc(n, m);
    float **b = memory_alloc(n, m);
    input(a, n, m);
    input(b, n, m);
    float **c = get_matrix(a, b, n, m);
    output(c, n, m);
    destroy(a, n);
    destroy(b, n);
    destroy(c, n);

    return 0;
}
