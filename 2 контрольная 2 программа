#include <iostream>
using namespace std;

//Две матрицы n на m и k на l, распечатать матрицы
//у которых максимальный элемент среди всех элементов тех строк , которые упорядочены по неубыванию, содержит нечетное количество цифр

int** memory_allocate(int n, int m)
{
	int** a;
	a = new int* [n];
	for (int i = 0; i < n; i++)
		a[i] = new int[m];

	return a;
}

void printmat(int** a, int n, int m)
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			printf("%d\n", a[i][j]);
}

bool UP(int* a, int n)
{
	bool flag = true;
	for (int i = 0; i < n - 1; i++)
	{
		if (a[i] > a[i + 1])
		{
			flag = false;
			break;
		}
	}
	return flag;
}

int count(int n)
{
	int cnt = 0;
	while (n > 0)
	{
		cnt++;
		n = n / 10;
	}
	return cnt;
}

int maxus(int** a, int n, int m)
{
	int max = 0;
	for (int i = 0; i < n; i++)
		if (UP(a[i], m))
		{
			if (a[i][m-1] > max)
				max = a[i][m-1];
		}
	return max;
}

int destroy(int** a, int n, int m)
{
	for (int i = 0; i < n; i++)
		delete[] a[i];
	return 0;
}

int** input(int** a, int n, int m)
{
	for (int j = 0; j < m; j++)
		for (int i = 0; i < n; i++)
			scanf_s("%d", &a[i][j]);
	return a;
}

int main()
{
	int n, m, k, l;
	int w = 0;
	scanf_s("%d%d%d%d", &n, &m, &k, &l);
	int** a;
	int** b;
	a = memory_allocate(n, m);
	b = memory_allocate(k, l);
	input(a, n, m);
	input(b, k, l);

	setlocale(LC_ALL, ".1251");

	if (count(maxus(a, n, m)) != 0)
		if (count(maxus(a, n, m)) % 2 != 0)
			printmat(a, n, m);
	else
		printf("Матрица 1 не содержит упорядоченных строк");;

	if (count(maxus(b, k, l)) != 0)
		if (count(maxus(b, k, l)) % 2 != 0)
			printmat(b, k, l);
	else
		printf("Матрица 2 не содержит упорядоченных строк");;

	destroy(a, n, m);
	destroy(b, k, l);

	return 0;

}
